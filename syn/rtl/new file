module four_bit_adder(input logic [3:0] a, input logic [3:0] b, input logic c_in, output logic [3:0] sum, output logic c_out);
  always_comb begin
    case (c_in)
      0: begin
        sum[0] = a[0] ^ b[0];
        sum[1] = a[1] ^ b[1];
        sum[2] = a[2] ^ b[2];
        sum[3] = a[3] ^ b[3];
        c_out = a[3] & b[3];
      end
      1: begin
        sum[0] = a[0] ^ b[0] ^ 1;
        sum[1] = a[1] ^ b[1] ^ ((a[0] & b[0]) | (a[0] & 1) | (b[0] & 1));
        sum[2] = a[2] ^ b[2] ^ ((a[1] & b[1]) | (a[1] & 1) | (b[1] & 1) | (a[0] & b[0] & 1));
        sum[3] = a[3] ^ b[3] ^ ((a[2] & b[2]) | (a[2] & 1) | (b[2] & 1) | (a[1] & b[1] & 1) | (a[0] & b[0] & 1));
        c_out = (a[3] & b[3]) | (a[2] & b[2] & 1) | (a[1] & b[1] & 1) | (a[0] & b[0] & 1);
      end
default: sum = 4'xxxx;
         c_out = 4'xxxx;
    endcase
  end
endmodule

